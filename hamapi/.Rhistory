for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
if (length(imageurls)!= 1){
message("not valid input, please check your token")
}
else {
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture(classification="Paintings")
library(svDialogs)
get_picture(classification="Paintings")
library(httr)
library(RCurl)
library(bitops)
library(rvest)
library(xml2)
get_picture(classification="Paintings")
get_picture(classification="Paintings")
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
if (length(imageurls)!= 1){
message("not valid input, please check your token")
}
else {
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture(token=token)
get_picture()
docoument()
document()
build()
check()
document()
build()
check()
document()
build()
check()
library(hamapi)
library(hamapi)
get_picture()
token <- get_token()
get_picture()
get_picture(numberp = 1)
get_picture(numberp=1)
get_picture(numberp=1)
document()
build()
check()
knitr::opts_chunk$set(echo = TRUE)
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
if (exists(token)==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else{
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
if (numberp <= 5){
if (exists(token)==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else {
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
if (length(imageurls)!= 1){
message("not valid input, please check your token")
}
else {
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
}
get_picture()
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (exists(token)==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
if (length(imageurls)!= 1){
message("not valid input, please check your token")
}
else {
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture()
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (exists("token")==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
if (length(imageurls)!= 1){
message("not valid input, please check your token")
}
else {
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture()
token <- get_token()
get_picture()
get_picture(numberp = 2)
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (exists("token")==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
if (length(as.vector(unlist(nameimage[i]))) != 1){
message("this item may not have an image")
}
else{
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (exists("token")==FALSE){
message("please get your token thorough `token <- get_token()` and input token=token in this function : )")
}
else if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
print(url)
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size, token=token)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
if (length(as.vector(unlist(nameimage[i]))) != 1){
message("this item may not have an image")
}
else{
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
}
print("Hooray! finished")
}
}
}
get_picture()
get_picture(numberp=1)
document()
build)
build()
check()
document()
build()
check()
document()
build()
check()
library(hamapi)
library(hamapi)
get_picture()
token <- get_token()
get_picture()
get_picture(numberp=1)
library(hamapi)
#This function get artwork information by classification.
#There are 2 input variables: The classification and size
artresult <- get_artwork_info(
classification='Prints',
#This is the HAM available classification, if this is not a valid classification.
#The function inside this function (is_classification) will let you know that this is not valid.
size=10)
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#You should have already generated a global variable of token
#In some cases, the API may fail to return valid information. If the status code is not 200, this function will stop and produce "Harvard Art Museum request failed"
artresult
#Now you may see the complete result from this function. With the input "Prints" and "size=10". You get a list which contains information about the 10 artworks under the category of "Print".
#Different version of R Studio may display it differently. Please open it on the right top of R Stuio if it cannot be fully displayed. : )
#You will have information about the title, century, period, culture, division, classification, department, object id, the corresponding URL on the website and the corresponding image url of the artwork.
#For example, you can see for "Women and Male Attendant at the Shore (Enoshima?)", it is completed in 18th century in Edo period, 1615-1868. It is under Japanese culture. It belongs to the Asian and Mediterranean Art division. It belongs to Department of Asian Art. The url is also in the result "https://www.harvardartmuseums.org/collections/object/203554". Please feel free to browse the website if your are interested in.
picture <- get_picture(
classification = 'Prints',
#This is the HAM available classification.
size=10,
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#You should have already generated a global variable of token
#This function will return error if you are trying to download picture that is more than your search result.
numberp=2
#This is the number of pictures that you want to download from the website. When you are trying to download more than 5 pictures from the website. If your answer is "Yes". It will continue to download. After the download, you will see a "Hooray! finished!" If your answer is "No". It will ask you to try a smaller number.
)
get_picture(
classification = 'Prints',
#This is the HAM available classification.
size=10,
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#You should have already generated a global variable of token
#This function will return error if you are trying to download picture that is more than your search result.
numberp=2
#This is the number of pictures that you want to download from the website. When you are trying to download more than 5 pictures from the website. If your answer is "Yes". It will continue to download. After the download, you will see a "Hooray! finished!" If your answer is "No". It will ask you to try a smaller number.
)
#Please input your token. (WITHOUT THE ' ')
token <- get_token()
#IMPORTANT: plese excute both lines when using this package. Otherwise the token is not specified as a global variable. Thank you!
#Congrats! Your token is now saved as a global variable and can be used in other functions in this package.
document()
build()
check()
build()
check()
library(hamapi)
get_picture()
usethis::use_pkgdown()
pkgdown::build_site()
document()
build()
check()
library(hamapi)
usethis::use_pkgdown()
pkgdown::build_site()
document()
library(devtools)
document()
build()
check()
library(hamapi)
library(devtools)
document()
document()
document()
build()
check()
document()
document()
build()
check()
document(）
document()
build()
build()
get_picture()
library(hamapi)
get_picture()
pkgdown::build_site()
