if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
#download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
#quiet = FALSE, mode="w",cacheOK=TRUE)
curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
#download.file(imageurls[i], destfile = as.character(nameimage[i]),
#              quiet = FALSE, mode="w",cacheOK=TRUE)
curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
get_picture(size=10, numberp = 2, classification = 'Vessels')
get_picture(size=5, numberp = 2, classification = 'Prints')
document()
build()
#library(curl)
library(utils)
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(curl)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
#curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
#             quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(imageurls[i], destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
#curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
#             quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
get_picture(size=10, numberp = 2, classification = 'Vessels')
get_picture(size=5, numberp = 2, classification = 'Prints')
build()
build()
document()
build()
get_gallery_info <- function(floor=2, size=10){
#library(httr)
#library(RCurl)
#library(svDialogs)
#token <- get_token()
url1 <- 'http://api.harvardartmuseums.org/gallery?'
url2 <- 'floor='
url3 <- '&apikey='
url4 <- '&size='
endpoint <- paste(url1, url2, floor1, url3, token, url4, size, sep ="")
name <- list()
theme <- list()
galleryid <- list()
gfloor <- list()
objectcount <- list()
labeltext <- list()
url <- list()
if (floor1 > 3){
stop(
sprintf(
"Only Floor 1 - Floor 3 have galleries"
),
call. = FALSE
)
}
if (floor1 == 1 & size > 20){
stop(
sprintf(
"First floor only have 20 galleries"
),
call. = FALSE
)
}
if (floor1 == 2 & size > 24){
stop(
sprintf(
"Second floor only have 24 galleries"
),
call. = FALSE
)
}
if (floor1 == 3 & size > 12){
stop(
sprintf(
"Third flood only have 12 galleries"
),
call. = FALSE
)
}
if (length(endpoint) ==1){
webinfo <- GET(endpoint)
web <- content(GET(endpoint))
status <- as.numeric(status_code(webinfo))
if (status != 200){
stop(
sprintf(
"Harvard Art Museum request failed",
status
),
call. = FALSE
)
}
else {
for (i in 1: size){
if (is.null(web$records[[i]]$url) == TRUE){
web$records[[i]]$url = "no record"
}
if (is.null(web$records[[i]]$name) == TRUE){
web$records[[i]]$name = "no record"
}
if (is.null(web$records[[i]]$galleryid) == TRUE){
web$records[[i]]$galleryid = "no record"
}
if (is.null(web$records[[i]]$objectcount) == TRUE){
web$records[[i]]$objectcount = "no record"
}
if (is.null(web$records[[i]]$theme) == TRUE){
web$records[[i]]$theme = "no record"
}
if (is.null(web$records[[i]]$floor) == TRUE){
web$records[[i]]$floor = "no record"
}
if (is.null(web$records[[i]]$labeltext) == TRUE){
web$records[[i]]$labeltext = "no record"
}
galleryid[i] <- web$records[[i]]$galleryid
url[i] <- web$records[[i]]$url
theme[i] <- web$records[[i]]$theme
name[i] <- web$records[[i]]$name
objectcount[i] <- web$records[[i]]$objectcount
labeltext[i] <- web$records[[i]]$labeltext
gfloor[i] <- web$records[[i]]$floor
}
result1 <- list(name, theme, galleryid, gfloor, objectcount, labeltext, url)
result2 <- lapply(result1, function(x) ifelse(x == "NULL", "no record", x))
dat <- do.call(cbind, lapply(result2, cbind))
result <- as.data.frame(dat)
colnames(result) <- c("Name", "Theme", "Galleryid", "Floor", "Objectcount","Labeltext","Url")
rownames(result) <- unlist(galleryid)
return(result)
#assign("gallery_result_form", gresult, envir = globalenv())
}
}
}
get_gallery_info(floor=2, size=14)
get_gallery_info(floor1=2, size=14)
get_gallery_info <- function(floor1=2, size=10){
#library(httr)
#library(RCurl)
#library(svDialogs)
#token <- get_token()
url1 <- 'http://api.harvardartmuseums.org/gallery?'
url2 <- 'floor='
url3 <- '&apikey='
url4 <- '&size='
endpoint <- paste(url1, url2, floor1, url3, token, url4, size, sep ="")
name <- list()
theme <- list()
galleryid <- list()
gfloor <- list()
objectcount <- list()
labeltext <- list()
url <- list()
if (floor1 > 3){
stop(
sprintf(
"Only Floor 1 - Floor 3 have galleries"
),
call. = FALSE
)
}
if (floor1 == 1 & size > 20){
stop(
sprintf(
"First floor only have 20 galleries"
),
call. = FALSE
)
}
if (floor1 == 2 & size > 24){
stop(
sprintf(
"Second floor only have 24 galleries"
),
call. = FALSE
)
}
if (floor1 == 3 & size > 12){
stop(
sprintf(
"Third flood only have 12 galleries"
),
call. = FALSE
)
}
if (length(endpoint) ==1){
webinfo <- GET(endpoint)
web <- content(GET(endpoint))
status <- as.numeric(status_code(webinfo))
if (status != 200){
stop(
sprintf(
"Harvard Art Museum request failed",
status
),
call. = FALSE
)
}
else {
for (i in 1: size){
if (is.null(web$records[[i]]$url) == TRUE){
web$records[[i]]$url = "no record"
}
if (is.null(web$records[[i]]$name) == TRUE){
web$records[[i]]$name = "no record"
}
if (is.null(web$records[[i]]$galleryid) == TRUE){
web$records[[i]]$galleryid = "no record"
}
if (is.null(web$records[[i]]$objectcount) == TRUE){
web$records[[i]]$objectcount = "no record"
}
if (is.null(web$records[[i]]$theme) == TRUE){
web$records[[i]]$theme = "no record"
}
if (is.null(web$records[[i]]$floor) == TRUE){
web$records[[i]]$floor = "no record"
}
if (is.null(web$records[[i]]$labeltext) == TRUE){
web$records[[i]]$labeltext = "no record"
}
galleryid[i] <- web$records[[i]]$galleryid
url[i] <- web$records[[i]]$url
theme[i] <- web$records[[i]]$theme
name[i] <- web$records[[i]]$name
objectcount[i] <- web$records[[i]]$objectcount
labeltext[i] <- web$records[[i]]$labeltext
gfloor[i] <- web$records[[i]]$floor
}
result1 <- list(name, theme, galleryid, gfloor, objectcount, labeltext, url)
result2 <- lapply(result1, function(x) ifelse(x == "NULL", "no record", x))
dat <- do.call(cbind, lapply(result2, cbind))
result <- as.data.frame(dat)
colnames(result) <- c("Name", "Theme", "Galleryid", "Floor", "Objectcount","Labeltext","Url")
rownames(result) <- unlist(galleryid)
return(result)
#assign("gallery_result_form", gresult, envir = globalenv())
}
}
}
get_gallery_info(floor1=2, size=14)
get_gallery_info(floor1=1, size=12)
most_object <- function(floor2=2, size=5){
#library(httr)
#library(svDialogs)
#token <- get_token()
galleryr <- get_gallery_info(floor1=floor2, size=size)
obcount <- as.vector(unlist(galleryr$Objectcount))
maxob <- max(obcount)
for (i in 1:size){
if (as.numeric(galleryr$Objectcount[i] == maxob)){
result <- galleryr$Name[i]
}
}
return(result)
}
most_object(floor2 = 3, size = 2)
most_object(floor2 = 2, size = 20)
document()
build()
get_gallery_info <- function(floor=2, size=10){
#library(httr)
#library(RCurl)
#library(svDialogs)
#token <- get_token()
url1 <- 'http://api.harvardartmuseums.org/gallery?'
url2 <- 'floor='
url3 <- '&apikey='
url4 <- '&size='
endpoint <- paste(url1, url2, floor, url3, token, url4, size, sep ="")
name <- list()
theme <- list()
galleryid <- list()
gfloor <- list()
objectcount <- list()
labeltext <- list()
url <- list()
if (floor > 3){
stop(
sprintf(
"Only Floor 1 - Floor 3 have galleries"
),
call. = FALSE
)
}
if (floor == 1 & size > 20){
stop(
sprintf(
"First floor only have 20 galleries"
),
call. = FALSE
)
}
if (floor == 2 & size > 24){
stop(
sprintf(
"Second floor only have 24 galleries"
),
call. = FALSE
)
}
if (floor == 3 & size > 12){
stop(
sprintf(
"Third flood only have 12 galleries"
),
call. = FALSE
)
}
if (length(endpoint) ==1){
webinfo <- GET(endpoint)
web <- content(GET(endpoint))
status <- as.numeric(status_code(webinfo))
if (status != 200){
stop(
sprintf(
"Harvard Art Museum request failed",
status
),
call. = FALSE
)
}
else {
for (i in 1: size){
if (is.null(web$records[[i]]$url) == TRUE){
web$records[[i]]$url = "no record"
}
if (is.null(web$records[[i]]$name) == TRUE){
web$records[[i]]$name = "no record"
}
if (is.null(web$records[[i]]$galleryid) == TRUE){
web$records[[i]]$galleryid = "no record"
}
if (is.null(web$records[[i]]$objectcount) == TRUE){
web$records[[i]]$objectcount = "no record"
}
if (is.null(web$records[[i]]$theme) == TRUE){
web$records[[i]]$theme = "no record"
}
if (is.null(web$records[[i]]$floor) == TRUE){
web$records[[i]]$floor = "no record"
}
if (is.null(web$records[[i]]$labeltext) == TRUE){
web$records[[i]]$labeltext = "no record"
}
galleryid[i] <- web$records[[i]]$galleryid
url[i] <- web$records[[i]]$url
theme[i] <- web$records[[i]]$theme
name[i] <- web$records[[i]]$name
objectcount[i] <- web$records[[i]]$objectcount
labeltext[i] <- web$records[[i]]$labeltext
gfloor[i] <- web$records[[i]]$floor
}
result1 <- list(name, theme, galleryid, gfloor, objectcount, labeltext, url)
result2 <- lapply(result1, function(x) ifelse(x == "NULL", "no record", x))
dat <- do.call(cbind, lapply(result2, cbind))
result <- as.data.frame(dat)
colnames(result) <- c("Name", "Theme", "Galleryid", "Floor", "Objectcount","Labeltext","Url")
rownames(result) <- unlist(galleryid)
return(result)
#assign("gallery_result_form", gresult, envir = globalenv())
}
}
}
get_gallery_info(floor=2, size=14)
get_gallery_info(floor=1, size=12)
most_object <- function(floor=2, size=5){
#library(httr)
#library(svDialogs)
#token <- get_token()
galleryr <- get_gallery_info(floor=floor, size=size)
obcount <- as.vector(unlist(galleryr$Objectcount))
maxob <- max(obcount)
for (i in 1:size){
if (as.numeric(galleryr$Objectcount[i] == maxob)){
result <- galleryr$Name[i]
}
}
return(result)
}
most_object(floor = 3, size = 2)
most_object(floor = 2, size = 20)
most_object <- function(floor=2, size=5){
#library(httr)
#library(svDialogs)
#token <- get_token()
galleryr <- get_gallery_info(floor=floor, size=size)
obcount <- as.vector(unlist(galleryr$Objectcount))
#maxob <- max(obcount)
for (i in 1:size){
#if (as.numeric(galleryr$Objectcount[i] == maxob)){
maxob <- max(as.numeric(galleryr$Objectcount[i]))
result <- galleryr$Name[i]
#}
}
return(result)
}
most_object(floor = 3, size = 2)
most_object(floor = 2, size = 20)
document()
build()
check()
document()
build()
document()
build()
check()
pkgdown::build_site()
document()
library(usethis)
library(devtools)
library(usethis)
document()
build()
document()
build()
document()
build()
document()
build()
document()
build()
use_vignette("intro")
devtools::build_vignettes()
document()
build()
check()
pkgdown::build_site()
document()
build()
document()
build()
check()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
