mostgallery <- most_object(floor=2, size=24)
#Run this chunk, you will know that among the 24 galleries on the second floor. "The European and American Art, 17thâ€“19th century" has the most artworks collections.
library(hamapi)
#Please input your token. (WITHOUT THE ' ')
#get_token()
token <- get_token()
#assign("token", token, envir = globalenv())
#IMPORTANT: plese excute both lines when using this package. Otherwise the token is not specified as a global variable. Thank you!
#Congrats! Your token is now saved as a global variable and can be used in other functions in this package.
#Check if your input of classification is valid.
#The input of this function is class. You can specify `class = "Your chosen classification"`
is_classification(
class="Prints")
#Whether the classification is a valid one for Harvard Art Museum API?
is_classification(class="Prints")
#Run this chunk and you will get an output "TRUE". This shows that "Prints" is within the valid calssification of HAM.
is_classification(class="Music")
#Run this chunk and you will get an output "FALSE". This shows that "Datascience" is not within the valid calssification of HAM.
#This function get artwork information by classification.
#There are 2 input variables: The classification and size
artresult <- get_artwork_info(
classification='Prints',
#This is the HAM available classification, if this is not a valid classification.
#The function inside this function (is_classification) will let you know that this is not valid.
size=10)
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#In some cases, the API may fail to return valid information. If the status code is not 200, this function will stop and produce "Harvard Art Museum request failed"
artresult
#Now you may see the complete result from this function. With the input "Prints" and "size=10". You get a list which contains information about the 10 artworks under the category of "Print".
#Different version of R Studio may display it differently. Please open it on the right top of R Stuio if it cannot be fully displayed. : )
#You will have information about the title, century, period, culture, division, classification, department, object id, the corresponding URL on the website and the corresponding image url of the artwork.
#For example, you can see for "Women and Male Attendant at the Shore (Enoshima?)", it is completed in 18th century in Edo period, 1615-1868. It is under Japanese culture. It belongs to the Asian and Mediterranean Art division. It belongs to Department of Asian Art. The url is also in the result "https://www.harvardartmuseums.org/collections/object/203554". Please feel free to browse the website if your are interested in.
library(hamapi)
#Please input your token. (WITHOUT THE ' ')
#get_token()
token <- get_token()
#assign("token", token, envir = globalenv())
#IMPORTANT: plese excute both lines when using this package. Otherwise the token is not specified as a global variable. Thank you!
#Congrats! Your token is now saved as a global variable and can be used in other functions in this package.
#This function get artwork information by classification.
#There are 2 input variables: The classification and size
artresult <- get_artwork_info(
classification='Prints',
#This is the HAM available classification, if this is not a valid classification.
#The function inside this function (is_classification) will let you know that this is not valid.
size=10)
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#In some cases, the API may fail to return valid information. If the status code is not 200, this function will stop and produce "Harvard Art Museum request failed"
artresult
#Now you may see the complete result from this function. With the input "Prints" and "size=10". You get a list which contains information about the 10 artworks under the category of "Print".
#Different version of R Studio may display it differently. Please open it on the right top of R Stuio if it cannot be fully displayed. : )
#You will have information about the title, century, period, culture, division, classification, department, object id, the corresponding URL on the website and the corresponding image url of the artwork.
#For example, you can see for "Women and Male Attendant at the Shore (Enoshima?)", it is completed in 18th century in Edo period, 1615-1868. It is under Japanese culture. It belongs to the Asian and Mediterranean Art division. It belongs to Department of Asian Art. The url is also in the result "https://www.harvardartmuseums.org/collections/object/203554". Please feel free to browse the website if your are interested in.
library(hamapi)
artresult <- get_artwork_info(classification='Prints', size=10)
artresult <- get_artwork_info(classification='Prints', size=10)
artresult
install.packages("pkgdown")
devtools::install_github("r-lib/pkgdown")
library(hamapi)
#install.packages("svDialogs")
library(svDialogs)
get_token <- function(){
#library(svDialogs)
token1 <- dlgInput("What's your Harvard Art Museum token? (without ' ' at the beginning and the end)",
Sys.info())$res
return(token1)
#utils::globalVariables(c("token"))
#assign("token", token, envir = globalenv())
}
token <- get_token()
assign("token", token, envir = globalenv())
#install.packages("svDialogs")
library(svDialogs)
get_token <- function(){
#library(svDialogs)
token1 <- dlgInput("What's your Harvard Art Museum token? (without ' ' at the beginning and the end)",
Sys.info())$res
return(token1)
#utils::globalVariables(c("token"))
#assign("token", token, envir = globalenv())
}
token <- get_token()
assign("token", token, envir = globalenv())
is_classification <- function(class="Prints"){
classlist <- c('Prints', 'Albums', 'Amulets', 'Armor',
'Boxes', 'Calligraphy', 'Cameos', 'Fragments', 'Furnishings', 'Gems',
'Inscriptions', 'Jewelry', 'Mirrors', 'Mosaics', 'Paintings',
'Photographs', 'Plaques', 'Rubbings', 'Sculpture', 'Seals',
'Tablets', 'Tokens', 'Vessels')
if (class %in% classlist){
TRUE
}
else {
FALSE
}
}
library(httr)
library(svDialogs)
get_artwork_info <- function(classification='Prints', size=10){
#token <- get_token()
url <- list()
title <- list()
dclassification <- list()
division <- list()
century <- list()
objectid <- list()
culture <- list()
period <- list()
department <- list()
imageurl <- list()
url1 <- 'http://api.harvardartmuseums.org/object?'
url2 <- 'classification='
url3 <- '&apikey='
url4 <- '&size='
endpoint <- paste(url1, url2, classification, url3, token, url4, size, sep ="")
#if (length(endpoint) != 1){
#  stop(
#    sprintf(
#      "Harvard Art Museum request failed"
#    ),
#    call. = FALSE
#  )
#}
if (is_classification(classification)==FALSE){
stop(
sprintf(
"Invalid classification input"
),
call. = FALSE
)
}
else if (size > 100){
stop(
sprintf(
"API limit exceeded"
),
call. = FALSE
)
}
else if (length(endpoint) == 1){
webinfo <- GET(endpoint)
web <- content(GET(endpoint))
status <- as.numeric(status_code(webinfo))
if (status != 200){
stop(
sprintf(
"Harvard Art Museum request failed",
status
),
call. = FALSE
)
}
else {
for (i in 1:size){
if (is.null(web$records[[i]]$url) == TRUE){
web$records[[i]]$url = "no record"
}
if (is.null(web$records[[i]]$title) == TRUE){
web$records[[i]]$title = "no record"
}
if (is.null(web$records[[i]]$century) == TRUE){
web$records[[i]]$century = "no record"
}
if (is.null(web$records[[i]]$objectid) == TRUE){
web$records[[i]]$objectid = "no record"
}
if (is.null(web$records[[i]]$division) == TRUE){
web$records[[i]]$division = "no record"
}
if (is.null(web$records[[i]]$culture) == TRUE){
web$records[[i]]$culture = "no record"
}
if (is.null(web$records[[i]]$period) == TRUE){
web$records[[i]]$period = "no record"
}
if (is.null(web$records[[i]]$department) == TRUE){
web$records[[i]]$department = "no record"
}
if (is.null(web$records[[i]]$images[[1]]$baseimageurl) == TRUE){
web$records[[i]]$imageurl = "no record"
}
if (is.null(web$records[[i]]$classification) == TRUE){
web$records[[i]]$classification = "no record"
}
objectid[i] <- web$records[[i]]$objectid
url[i] <- web$records[[i]]$url
title[i] <- web$records[[i]]$title
century[i] <- web$records[[i]]$century
dclassification[i] <- web$records[[i]]$classification
division[i] <- web$records[[i]]$division
culture[i] <- web$records[[i]]$culture
period[i] <- web$records[[i]]$period
department[i] <- web$records[[i]]$department
imageurl[i] <- web$records[[i]]$images[[1]]$baseimageurl
}
result1 <- list(title, century, period, culture, division, dclassification, department,
objectid, url, imageurl)
result2 <- lapply(result1, function(x) ifelse(x == "NULL", "no record", x))
dat <- do.call(cbind, lapply(result2, cbind))
result <- as.data.frame(dat)
colnames(result) <- c("Title", "Century", "Period", "Culture","Division","Classification",
"Department", "Objectid","Url", "Imageurl")
rownames(result) <- unlist(objectid)
return(result)
}
}
}
#library(curl)
library(utils)
get_picture <- function(classification = 'Prints', size=10, numberp=7){
#library(httr)
#library(curl)
#library(RCurl)
#library(svDialogs)
if (numberp > size){
stop(
sprintf(
"You cannot download pictures more than your input size"
),
call. = FALSE
)
}
if (numberp > 5){
continue <- dlg_message("Your mac/pc will be flooded by pictures. Do you want to continue?", "yesno")$res
if (continue == 'no'){
stop(
sprintf(
"Try a smaller number : )"
),
call. = FALSE
)
}
if (continue == 'yes'){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
nameimage <- list()
for (i in 1:numberp){
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(url = as.character(imageurls[i]), destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
#curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
#             quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
if (numberp <= 5){
resultform <- get_artwork_info(classification=classification, size=size)
objectid1 <- resultform[,8]
imageurls <- as.vector(unlist(resultform[, 10]))
for (i in 1:numberp){
nameimage <- list()
nameimage[i] <- paste(objectid1[[i]],'.jpeg',sep="")
download.file(imageurls[i], destfile = as.character(nameimage[i]),
quiet = FALSE, mode="w",cacheOK=TRUE)
#curl_download(as.character(imageurls[i]), destfile = as.character(nameimage[i]),
#             quiet = FALSE, handle = new_handle())
}
print("Hooray! finished")
}
}
get_picture(size=10, numberp = 2, classification = 'Vessels')
get_picture(size=5, numberp = 2, classification = 'Prints')
knitr::opts_chunk$set(echo = TRUE)
library(hamapi)
library(hamapi)
token <- get_token()
get_artwork_info()
result <- get_artwork_info()
result
assign("token", token, envir = globalenv())
result <- get_artwork_info()
result
assign("token", token, envir = globalenv())
result <- get_artwork_info()
result
token <- get_token()
assign("token", token, envir = globalenv())
#assign("token", token, envir = globalenv())
result <- get_artwork_info()
result
#assign("token", token, envir = globalenv())
result <- get_artwork_info(classification = "Prints", size = 4)
result
#assign("token", token, envir = globalenv())
result <- get_artwork_info(classification = "Prints", size = 4)
result
library(httr)
#assign("token", token, envir = globalenv())
result <- get_artwork_info(classification = "Prints", size = 4)
result
#assign("token", token, envir = globalenv())
result <- get_artwork_info(classification = "Prints", size = 4)
result
library(hamapi)
#Please input your token. (WITHOUT THE ' ')
#get_token()
token <- get_token()
assign("token", token, envir = globalenv())
#IMPORTANT: plese excute both lines when using this package. Otherwise the token is not specified as a global variable. Thank you!
#Congrats! Your token is now saved as a global variable and can be used in other functions in this package.
#Please input your token. (WITHOUT THE ' ')
#get_token()
token <- get_token()
assign("token", token, envir = globalenv())
#IMPORTANT: plese excute both lines when using this package. Otherwise the token is not specified as a global variable. Thank you!
#Congrats! Your token is now saved as a global variable and can be used in other functions in this package.
#Check if your input of classification is valid.
#The input of this function is class. You can specify `class = "Your chosen classification"`
is_classification(
class="Prints")
#Whether the classification is a valid one for Harvard Art Museum API?
is_classification(class="Prints")
#Run this chunk and you will get an output "TRUE". This shows that "Prints" is within the valid calssification of HAM.
is_classification(class="Music")
#Run this chunk and you will get an output "FALSE". This shows that "Datascience" is not within the valid calssification of HAM.
#This function get artwork information by classification.
#There are 2 input variables: The classification and size
artresult <- get_artwork_info(
classification='Prints',
#This is the HAM available classification, if this is not a valid classification.
#The function inside this function (is_classification) will let you know that this is not valid.
size=10)
#This is the number of artworks that you want to get from this function. The limit here is set to be 100.
#If you have an input of size > 100, it will stop and produce an error "API limit exceeded".
#In some cases, the API may fail to return valid information. If the status code is not 200, this function will stop and produce "Harvard Art Museum request failed"
artresult
#Now you may see the complete result from this function. With the input "Prints" and "size=10". You get a list which contains information about the 10 artworks under the category of "Print".
#Different version of R Studio may display it differently. Please open it on the right top of R Stuio if it cannot be fully displayed. : )
#You will have information about the title, century, period, culture, division, classification, department, object id, the corresponding URL on the website and the corresponding image url of the artwork.
#For example, you can see for "Women and Male Attendant at the Shore (Enoshima?)", it is completed in 18th century in Edo period, 1615-1868. It is under Japanese culture. It belongs to the Asian and Mediterranean Art division. It belongs to Department of Asian Art. The url is also in the result "https://www.harvardartmuseums.org/collections/object/203554". Please feel free to browse the website if your are interested in.
get_artwork_info <- function(classification='Prints', size=10){
library(httr)
#library(svDialogs)
#token <- get_token()
url <- list()
title <- list()
dclassification <- list()
division <- list()
century <- list()
objectid <- list()
culture <- list()
period <- list()
department <- list()
imageurl <- list()
url1 <- 'http://api.harvardartmuseums.org/object?'
url2 <- 'classification='
url3 <- '&apikey='
url4 <- '&size='
endpoint <- paste(url1, url2, classification, url3, token, url4, size, sep ="")
#if (length(endpoint) != 1){
#  stop(
#    sprintf(
#      "Harvard Art Museum request failed"
#    ),
#    call. = FALSE
#  )
#}
if (is_classification(classification)==FALSE){
stop(
sprintf(
"Invalid classification input"
),
call. = FALSE
)
}
else if (size > 100){
stop(
sprintf(
"API limit exceeded"
),
call. = FALSE
)
}
else if (length(endpoint) == 1){
webinfo <- GET(endpoint)
web <- content(GET(endpoint))
status <- as.numeric(status_code(webinfo))
if (status != 200){
stop(
sprintf(
"Harvard Art Museum request failed",
status
),
call. = FALSE
)
}
else {
for (i in 1:size){
if (is.null(web$records[[i]]$url) == TRUE){
web$records[[i]]$url = "no record"
}
if (is.null(web$records[[i]]$title) == TRUE){
web$records[[i]]$title = "no record"
}
if (is.null(web$records[[i]]$century) == TRUE){
web$records[[i]]$century = "no record"
}
if (is.null(web$records[[i]]$objectid) == TRUE){
web$records[[i]]$objectid = "no record"
}
if (is.null(web$records[[i]]$division) == TRUE){
web$records[[i]]$division = "no record"
}
if (is.null(web$records[[i]]$culture) == TRUE){
web$records[[i]]$culture = "no record"
}
if (is.null(web$records[[i]]$period) == TRUE){
web$records[[i]]$period = "no record"
}
if (is.null(web$records[[i]]$department) == TRUE){
web$records[[i]]$department = "no record"
}
if (is.null(web$records[[i]]$images[[1]]$baseimageurl) == TRUE){
web$records[[i]]$imageurl = "no record"
}
if (is.null(web$records[[i]]$classification) == TRUE){
web$records[[i]]$classification = "no record"
}
objectid[i] <- web$records[[i]]$objectid
url[i] <- web$records[[i]]$url
title[i] <- web$records[[i]]$title
century[i] <- web$records[[i]]$century
dclassification[i] <- web$records[[i]]$classification
division[i] <- web$records[[i]]$division
culture[i] <- web$records[[i]]$culture
period[i] <- web$records[[i]]$period
department[i] <- web$records[[i]]$department
imageurl[i] <- web$records[[i]]$images[[1]]$baseimageurl
}
result1 <- list(title, century, period, culture, division, dclassification, department,
objectid, url, imageurl)
result2 <- lapply(result1, function(x) ifelse(x == "NULL", "no record", x))
dat <- do.call(cbind, lapply(result2, cbind))
result <- as.data.frame(dat)
colnames(result) <- c("Title", "Century", "Period", "Culture","Division","Classification",
"Department", "Objectid","Url", "Imageurl")
rownames(result) <- unlist(objectid)
return(result)
}
}
}
get_artwork_info(classification='Prints', size=10)
#token <- get_token()
install.packages("hamapi")
install.packages("hamapi")
install.packages("hamapi")
library(hamapi)
get_artwork_info()
get_artwork_info(classification = "Boxs")
get_artwork_info(classification = "Mirrors")
get_token()
get_artwork_info(classification = "Mirrors")
assign("token", token, envir = globalenv())
token <- get_token()
assign("token", token, envir = globalenv())
get_artwork_info(classification = "Mirrors")
library(hamapi)
library(hamapi)
token <- get_token()
get_artwork_info()
result <- get_artwork_info
result <- get_artwork_info()
is_classification("aoer")
setwd
library(hamapi)
library(hamapi)
get_artwork_info()
token <- get_token()
get_artwork_info()
library(usethis)
library(devtools)
setwd("/Users/Melodie/hamapi")
load_all()
get_artwork_info()
get_artwork_info(classification = "werw")
get_artwork_info(classification = "Paintings")
token <- get_token()
get_gallery_info(floor = 4)
get_gallery_info(floor = 2)
most_object(floor = 4)
most_object(floor = 2)
library(usethis)
library(devtools)
load_all()
document()
build()
check()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::build()
devtools::document()
devtools::install_github("klutometis/roxygen")
devtools::load_all()
devtools::document()
devtools::build()
devtools::check()
library(hamapi)
library(hamapi)
devtools::load_all()
devtools::document()
devtools::build()
devtools::check()
devtools::load_all()
devtools::document()
devtools::build()
